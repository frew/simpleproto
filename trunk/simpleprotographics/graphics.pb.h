// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_graphics_2eproto__INCLUDED
#define PROTOBUF_graphics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000002
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

// Internal implementation detail -- do not call these.
void  protobuf_BuildDesc_graphics_2eproto();
void protobuf_BuildDesc_graphics_2eproto_AssignGlobalDescriptors(
    ::google::protobuf::FileDescriptor* file);

class GraphicsTransaction;
class GraphicsMessage;
class ColorMessage;
class PointSizeMessage;
class CircleMessage;
class PointMessage;
class LineMessage;
class MapMessage;
class ScaleMessage;
class MouseEvent;

enum MouseEvent_MouseButton {
  MouseEvent_MouseButton_LEFT_BUTTON = 0,
  MouseEvent_MouseButton_RIGHT_BUTTON = 1,
  MouseEvent_MouseButton_MIDDLE_BUTTON = 2
};
const ::google::protobuf::EnumDescriptor* MouseEvent_MouseButton_descriptor();
bool MouseEvent_MouseButton_IsValid(int value);
const MouseEvent_MouseButton MouseEvent_MouseButton_MouseButton_MIN = MouseEvent_MouseButton_LEFT_BUTTON;
const MouseEvent_MouseButton MouseEvent_MouseButton_MouseButton_MAX = MouseEvent_MouseButton_MIDDLE_BUTTON;

enum MouseEvent_MouseState {
  MouseEvent_MouseState_UP = 0,
  MouseEvent_MouseState_DOWN = 1
};
const ::google::protobuf::EnumDescriptor* MouseEvent_MouseState_descriptor();
bool MouseEvent_MouseState_IsValid(int value);
const MouseEvent_MouseState MouseEvent_MouseState_MouseState_MIN = MouseEvent_MouseState_UP;
const MouseEvent_MouseState MouseEvent_MouseState_MouseState_MAX = MouseEvent_MouseState_DOWN;

// ===================================================================

class GraphicsTransaction : public ::google::protobuf::Message {
 public:
  GraphicsTransaction();
  virtual ~GraphicsTransaction();
  
  GraphicsTransaction(const GraphicsTransaction& from);
  
  inline GraphicsTransaction& operator=(const GraphicsTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphicsTransaction& default_instance();
  // implements Message ----------------------------------------------
  
  GraphicsTransaction* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .GraphicsMessage message = 1;
  inline int message_size() const;
  inline void clear_message();
  inline const ::google::protobuf::RepeatedPtrField< ::GraphicsMessage >& message() const;
  inline ::google::protobuf::RepeatedPtrField< ::GraphicsMessage >* mutable_message();
  inline const ::GraphicsMessage& message(int index) const;
  inline ::GraphicsMessage* mutable_message(int index);
  inline ::GraphicsMessage* add_message();
  
  // optional bool persistent = 2 [default = false];
  inline bool has_persistent() const;
  inline void clear_persistent();
  inline bool persistent() const;
  inline void set_persistent(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::GraphicsMessage > message_;
  bool persistent_;
  friend void protobuf_BuildDesc_graphics_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  static const int _offsets_[2];
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GraphicsTransaction* default_instance_;
};
// -------------------------------------------------------------------

class GraphicsMessage : public ::google::protobuf::Message {
 public:
  GraphicsMessage();
  virtual ~GraphicsMessage();
  
  GraphicsMessage(const GraphicsMessage& from);
  
  inline GraphicsMessage& operator=(const GraphicsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphicsMessage& default_instance();
  // implements Message ----------------------------------------------
  
  GraphicsMessage* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ColorMessage color = 1;
  inline bool has_color() const;
  inline void clear_color();
  inline const ::ColorMessage& color() const;
  inline ::ColorMessage* mutable_color();
  
  // optional .PointSizeMessage point_size = 2;
  inline bool has_point_size() const;
  inline void clear_point_size();
  inline const ::PointSizeMessage& point_size() const;
  inline ::PointSizeMessage* mutable_point_size();
  
  // optional .CircleMessage circle = 3;
  inline bool has_circle() const;
  inline void clear_circle();
  inline const ::CircleMessage& circle() const;
  inline ::CircleMessage* mutable_circle();
  
  // optional .PointMessage point = 4;
  inline bool has_point() const;
  inline void clear_point();
  inline const ::PointMessage& point() const;
  inline ::PointMessage* mutable_point();
  
  // optional .LineMessage line = 5;
  inline bool has_line() const;
  inline void clear_line();
  inline const ::LineMessage& line() const;
  inline ::LineMessage* mutable_line();
  
  // optional .MapMessage map = 6;
  inline bool has_map() const;
  inline void clear_map();
  inline const ::MapMessage& map() const;
  inline ::MapMessage* mutable_map();
  
  // optional .ScaleMessage scale = 7;
  inline bool has_scale() const;
  inline void clear_scale();
  inline const ::ScaleMessage& scale() const;
  inline ::ScaleMessage* mutable_scale();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::ColorMessage* color_;
  ::PointSizeMessage* point_size_;
  ::CircleMessage* circle_;
  ::PointMessage* point_;
  ::LineMessage* line_;
  ::MapMessage* map_;
  ::ScaleMessage* scale_;
  friend void protobuf_BuildDesc_graphics_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  static const int _offsets_[7];
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GraphicsMessage* default_instance_;
};
// -------------------------------------------------------------------

class ColorMessage : public ::google::protobuf::Message {
 public:
  ColorMessage();
  virtual ~ColorMessage();
  
  ColorMessage(const ColorMessage& from);
  
  inline ColorMessage& operator=(const ColorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ColorMessage& default_instance();
  // implements Message ----------------------------------------------
  
  ColorMessage* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 r = 1;
  inline bool has_r() const;
  inline void clear_r();
  inline ::google::protobuf::int32 r() const;
  inline void set_r(::google::protobuf::int32 value);
  
  // required int32 g = 2;
  inline bool has_g() const;
  inline void clear_g();
  inline ::google::protobuf::int32 g() const;
  inline void set_g(::google::protobuf::int32 value);
  
  // required int32 b = 3;
  inline bool has_b() const;
  inline void clear_b();
  inline ::google::protobuf::int32 b() const;
  inline void set_b(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 r_;
  ::google::protobuf::int32 g_;
  ::google::protobuf::int32 b_;
  friend void protobuf_BuildDesc_graphics_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  static const int _offsets_[3];
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ColorMessage* default_instance_;
};
// -------------------------------------------------------------------

class PointSizeMessage : public ::google::protobuf::Message {
 public:
  PointSizeMessage();
  virtual ~PointSizeMessage();
  
  PointSizeMessage(const PointSizeMessage& from);
  
  inline PointSizeMessage& operator=(const PointSizeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointSizeMessage& default_instance();
  // implements Message ----------------------------------------------
  
  PointSizeMessage* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double sz = 1;
  inline bool has_sz() const;
  inline void clear_sz();
  inline double sz() const;
  inline void set_sz(double value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double sz_;
  friend void protobuf_BuildDesc_graphics_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  static const int _offsets_[1];
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PointSizeMessage* default_instance_;
};
// -------------------------------------------------------------------

class CircleMessage : public ::google::protobuf::Message {
 public:
  CircleMessage();
  virtual ~CircleMessage();
  
  CircleMessage(const CircleMessage& from);
  
  inline CircleMessage& operator=(const CircleMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CircleMessage& default_instance();
  // implements Message ----------------------------------------------
  
  CircleMessage* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double cx = 1;
  inline bool has_cx() const;
  inline void clear_cx();
  inline double cx() const;
  inline void set_cx(double value);
  
  // required double cy = 2;
  inline bool has_cy() const;
  inline void clear_cy();
  inline double cy() const;
  inline void set_cy(double value);
  
  // required double radius = 3;
  inline bool has_radius() const;
  inline void clear_radius();
  inline double radius() const;
  inline void set_radius(double value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double cx_;
  double cy_;
  double radius_;
  friend void protobuf_BuildDesc_graphics_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  static const int _offsets_[3];
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CircleMessage* default_instance_;
};
// -------------------------------------------------------------------

class PointMessage : public ::google::protobuf::Message {
 public:
  PointMessage();
  virtual ~PointMessage();
  
  PointMessage(const PointMessage& from);
  
  inline PointMessage& operator=(const PointMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointMessage& default_instance();
  // implements Message ----------------------------------------------
  
  PointMessage* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  inline double x() const;
  inline void set_x(double value);
  
  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  inline double y() const;
  inline void set_y(double value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double x_;
  double y_;
  friend void protobuf_BuildDesc_graphics_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  static const int _offsets_[2];
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PointMessage* default_instance_;
};
// -------------------------------------------------------------------

class LineMessage : public ::google::protobuf::Message {
 public:
  LineMessage();
  virtual ~LineMessage();
  
  LineMessage(const LineMessage& from);
  
  inline LineMessage& operator=(const LineMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LineMessage& default_instance();
  // implements Message ----------------------------------------------
  
  LineMessage* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double x0 = 1;
  inline bool has_x0() const;
  inline void clear_x0();
  inline double x0() const;
  inline void set_x0(double value);
  
  // required double y0 = 2;
  inline bool has_y0() const;
  inline void clear_y0();
  inline double y0() const;
  inline void set_y0(double value);
  
  // required double x1 = 3;
  inline bool has_x1() const;
  inline void clear_x1();
  inline double x1() const;
  inline void set_x1(double value);
  
  // required double y1 = 4;
  inline bool has_y1() const;
  inline void clear_y1();
  inline double y1() const;
  inline void set_y1(double value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double x0_;
  double y0_;
  double x1_;
  double y1_;
  friend void protobuf_BuildDesc_graphics_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  static const int _offsets_[4];
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LineMessage* default_instance_;
};
// -------------------------------------------------------------------

class MapMessage : public ::google::protobuf::Message {
 public:
  MapMessage();
  virtual ~MapMessage();
  
  MapMessage(const MapMessage& from);
  
  inline MapMessage& operator=(const MapMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapMessage& default_instance();
  // implements Message ----------------------------------------------
  
  MapMessage* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double xcenter = 1;
  inline bool has_xcenter() const;
  inline void clear_xcenter();
  inline double xcenter() const;
  inline void set_xcenter(double value);
  
  // required double ycenter = 2;
  inline bool has_ycenter() const;
  inline void clear_ycenter();
  inline double ycenter() const;
  inline void set_ycenter(double value);
  
  // required double scale = 3;
  inline bool has_scale() const;
  inline void clear_scale();
  inline double scale() const;
  inline void set_scale(double value);
  
  // required int32 xres = 4;
  inline bool has_xres() const;
  inline void clear_xres();
  inline ::google::protobuf::int32 xres() const;
  inline void set_xres(::google::protobuf::int32 value);
  
  // required int32 yres = 5;
  inline bool has_yres() const;
  inline void clear_yres();
  inline ::google::protobuf::int32 yres() const;
  inline void set_yres(::google::protobuf::int32 value);
  
  // optional bytes data = 6;
  inline bool has_data() const;
  inline void clear_data();
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double xcenter_;
  double ycenter_;
  double scale_;
  ::google::protobuf::int32 xres_;
  ::google::protobuf::int32 yres_;
  ::std::string* data_;
  static const ::std::string _default_data_;
  friend void protobuf_BuildDesc_graphics_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  static const int _offsets_[6];
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MapMessage* default_instance_;
};
// -------------------------------------------------------------------

class ScaleMessage : public ::google::protobuf::Message {
 public:
  ScaleMessage();
  virtual ~ScaleMessage();
  
  ScaleMessage(const ScaleMessage& from);
  
  inline ScaleMessage& operator=(const ScaleMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScaleMessage& default_instance();
  // implements Message ----------------------------------------------
  
  ScaleMessage* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double scale = 1;
  inline bool has_scale() const;
  inline void clear_scale();
  inline double scale() const;
  inline void set_scale(double value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double scale_;
  friend void protobuf_BuildDesc_graphics_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  static const int _offsets_[1];
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ScaleMessage* default_instance_;
};
// -------------------------------------------------------------------

class MouseEvent : public ::google::protobuf::Message {
 public:
  MouseEvent();
  virtual ~MouseEvent();
  
  MouseEvent(const MouseEvent& from);
  
  inline MouseEvent& operator=(const MouseEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MouseEvent& default_instance();
  // implements Message ----------------------------------------------
  
  MouseEvent* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  typedef MouseEvent_MouseButton MouseButton;
  static const MouseButton LEFT_BUTTON = MouseEvent_MouseButton_LEFT_BUTTON;
  static const MouseButton RIGHT_BUTTON = MouseEvent_MouseButton_RIGHT_BUTTON;
  static const MouseButton MIDDLE_BUTTON = MouseEvent_MouseButton_MIDDLE_BUTTON;
  static inline const ::google::protobuf::EnumDescriptor*
  MouseButton_descriptor() {
    return MouseEvent_MouseButton_descriptor();
  }
  static inline bool MouseButton_IsValid(int value) {
    return MouseEvent_MouseButton_IsValid(value);
  }
  static const MouseButton MouseButton_MIN =
    MouseEvent_MouseButton_MouseButton_MIN;
  static const MouseButton MouseButton_MAX =
    MouseEvent_MouseButton_MouseButton_MAX;
  
  typedef MouseEvent_MouseState MouseState;
  static const MouseState UP = MouseEvent_MouseState_UP;
  static const MouseState DOWN = MouseEvent_MouseState_DOWN;
  static inline const ::google::protobuf::EnumDescriptor*
  MouseState_descriptor() {
    return MouseEvent_MouseState_descriptor();
  }
  static inline bool MouseState_IsValid(int value) {
    return MouseEvent_MouseState_IsValid(value);
  }
  static const MouseState MouseState_MIN =
    MouseEvent_MouseState_MouseState_MIN;
  static const MouseState MouseState_MAX =
    MouseEvent_MouseState_MouseState_MAX;
  
  // accessors -------------------------------------------------------
  
  // required .MouseEvent.MouseButton button = 1;
  inline bool has_button() const;
  inline void clear_button();
  inline ::MouseEvent_MouseButton button() const;
  inline void set_button(::MouseEvent_MouseButton value);
  
  // required .MouseEvent.MouseState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  inline ::MouseEvent_MouseState state() const;
  inline void set_state(::MouseEvent_MouseState value);
  
  // required double x = 3;
  inline bool has_x() const;
  inline void clear_x();
  inline double x() const;
  inline void set_x(double value);
  
  // required double y = 4;
  inline bool has_y() const;
  inline void clear_y();
  inline double y() const;
  inline void set_y(double value);
  
  // optional bool shift_down = 5;
  inline bool has_shift_down() const;
  inline void clear_shift_down();
  inline bool shift_down() const;
  inline void set_shift_down(bool value);
  
  // optional bool ctrl_down = 6;
  inline bool has_ctrl_down() const;
  inline void clear_ctrl_down();
  inline bool ctrl_down() const;
  inline void set_ctrl_down(bool value);
  
  // optional bool alt_down = 7;
  inline bool has_alt_down() const;
  inline void clear_alt_down();
  inline bool alt_down() const;
  inline void set_alt_down(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int button_;
  int state_;
  double x_;
  double y_;
  bool shift_down_;
  bool ctrl_down_;
  bool alt_down_;
  friend void protobuf_BuildDesc_graphics_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  static const int _offsets_[7];
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MouseEvent* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// GraphicsTransaction

// repeated .GraphicsMessage message = 1;
inline int GraphicsTransaction::message_size() const {
  return message_.size();
}
inline void GraphicsTransaction::clear_message() {
  message_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::GraphicsMessage >&
GraphicsTransaction::message() const {
  return message_;
}
inline ::google::protobuf::RepeatedPtrField< ::GraphicsMessage >*
GraphicsTransaction::mutable_message() {
  return &message_;
}
inline const ::GraphicsMessage& GraphicsTransaction::message(int index) const {
  return message_.Get(index);
}
inline ::GraphicsMessage* GraphicsTransaction::mutable_message(int index) {
  return message_.Mutable(index);
}
inline ::GraphicsMessage* GraphicsTransaction::add_message() {
  return message_.Add();
}

// optional bool persistent = 2 [default = false];
inline bool GraphicsTransaction::has_persistent() const {
  return _has_bit(1);
}
inline void GraphicsTransaction::clear_persistent() {
  persistent_ = false;
  _clear_bit(1);
}
inline bool GraphicsTransaction::persistent() const {
  return persistent_;
}
inline void GraphicsTransaction::set_persistent(bool value) {
  _set_bit(1);
  persistent_ = value;
}

// -------------------------------------------------------------------

// GraphicsMessage

// optional .ColorMessage color = 1;
inline bool GraphicsMessage::has_color() const {
  return _has_bit(0);
}
inline void GraphicsMessage::clear_color() {
  if (color_ != NULL) color_->::ColorMessage::Clear();
  _clear_bit(0);
}
inline const ::ColorMessage& GraphicsMessage::color() const {
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::ColorMessage* GraphicsMessage::mutable_color() {
  _set_bit(0);
  if (color_ == NULL) color_ = new ::ColorMessage;
  return color_;
}

// optional .PointSizeMessage point_size = 2;
inline bool GraphicsMessage::has_point_size() const {
  return _has_bit(1);
}
inline void GraphicsMessage::clear_point_size() {
  if (point_size_ != NULL) point_size_->::PointSizeMessage::Clear();
  _clear_bit(1);
}
inline const ::PointSizeMessage& GraphicsMessage::point_size() const {
  return point_size_ != NULL ? *point_size_ : *default_instance_->point_size_;
}
inline ::PointSizeMessage* GraphicsMessage::mutable_point_size() {
  _set_bit(1);
  if (point_size_ == NULL) point_size_ = new ::PointSizeMessage;
  return point_size_;
}

// optional .CircleMessage circle = 3;
inline bool GraphicsMessage::has_circle() const {
  return _has_bit(2);
}
inline void GraphicsMessage::clear_circle() {
  if (circle_ != NULL) circle_->::CircleMessage::Clear();
  _clear_bit(2);
}
inline const ::CircleMessage& GraphicsMessage::circle() const {
  return circle_ != NULL ? *circle_ : *default_instance_->circle_;
}
inline ::CircleMessage* GraphicsMessage::mutable_circle() {
  _set_bit(2);
  if (circle_ == NULL) circle_ = new ::CircleMessage;
  return circle_;
}

// optional .PointMessage point = 4;
inline bool GraphicsMessage::has_point() const {
  return _has_bit(3);
}
inline void GraphicsMessage::clear_point() {
  if (point_ != NULL) point_->::PointMessage::Clear();
  _clear_bit(3);
}
inline const ::PointMessage& GraphicsMessage::point() const {
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::PointMessage* GraphicsMessage::mutable_point() {
  _set_bit(3);
  if (point_ == NULL) point_ = new ::PointMessage;
  return point_;
}

// optional .LineMessage line = 5;
inline bool GraphicsMessage::has_line() const {
  return _has_bit(4);
}
inline void GraphicsMessage::clear_line() {
  if (line_ != NULL) line_->::LineMessage::Clear();
  _clear_bit(4);
}
inline const ::LineMessage& GraphicsMessage::line() const {
  return line_ != NULL ? *line_ : *default_instance_->line_;
}
inline ::LineMessage* GraphicsMessage::mutable_line() {
  _set_bit(4);
  if (line_ == NULL) line_ = new ::LineMessage;
  return line_;
}

// optional .MapMessage map = 6;
inline bool GraphicsMessage::has_map() const {
  return _has_bit(5);
}
inline void GraphicsMessage::clear_map() {
  if (map_ != NULL) map_->::MapMessage::Clear();
  _clear_bit(5);
}
inline const ::MapMessage& GraphicsMessage::map() const {
  return map_ != NULL ? *map_ : *default_instance_->map_;
}
inline ::MapMessage* GraphicsMessage::mutable_map() {
  _set_bit(5);
  if (map_ == NULL) map_ = new ::MapMessage;
  return map_;
}

// optional .ScaleMessage scale = 7;
inline bool GraphicsMessage::has_scale() const {
  return _has_bit(6);
}
inline void GraphicsMessage::clear_scale() {
  if (scale_ != NULL) scale_->::ScaleMessage::Clear();
  _clear_bit(6);
}
inline const ::ScaleMessage& GraphicsMessage::scale() const {
  return scale_ != NULL ? *scale_ : *default_instance_->scale_;
}
inline ::ScaleMessage* GraphicsMessage::mutable_scale() {
  _set_bit(6);
  if (scale_ == NULL) scale_ = new ::ScaleMessage;
  return scale_;
}

// -------------------------------------------------------------------

// ColorMessage

// required int32 r = 1;
inline bool ColorMessage::has_r() const {
  return _has_bit(0);
}
inline void ColorMessage::clear_r() {
  r_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 ColorMessage::r() const {
  return r_;
}
inline void ColorMessage::set_r(::google::protobuf::int32 value) {
  _set_bit(0);
  r_ = value;
}

// required int32 g = 2;
inline bool ColorMessage::has_g() const {
  return _has_bit(1);
}
inline void ColorMessage::clear_g() {
  g_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 ColorMessage::g() const {
  return g_;
}
inline void ColorMessage::set_g(::google::protobuf::int32 value) {
  _set_bit(1);
  g_ = value;
}

// required int32 b = 3;
inline bool ColorMessage::has_b() const {
  return _has_bit(2);
}
inline void ColorMessage::clear_b() {
  b_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 ColorMessage::b() const {
  return b_;
}
inline void ColorMessage::set_b(::google::protobuf::int32 value) {
  _set_bit(2);
  b_ = value;
}

// -------------------------------------------------------------------

// PointSizeMessage

// required double sz = 1;
inline bool PointSizeMessage::has_sz() const {
  return _has_bit(0);
}
inline void PointSizeMessage::clear_sz() {
  sz_ = 0;
  _clear_bit(0);
}
inline double PointSizeMessage::sz() const {
  return sz_;
}
inline void PointSizeMessage::set_sz(double value) {
  _set_bit(0);
  sz_ = value;
}

// -------------------------------------------------------------------

// CircleMessage

// required double cx = 1;
inline bool CircleMessage::has_cx() const {
  return _has_bit(0);
}
inline void CircleMessage::clear_cx() {
  cx_ = 0;
  _clear_bit(0);
}
inline double CircleMessage::cx() const {
  return cx_;
}
inline void CircleMessage::set_cx(double value) {
  _set_bit(0);
  cx_ = value;
}

// required double cy = 2;
inline bool CircleMessage::has_cy() const {
  return _has_bit(1);
}
inline void CircleMessage::clear_cy() {
  cy_ = 0;
  _clear_bit(1);
}
inline double CircleMessage::cy() const {
  return cy_;
}
inline void CircleMessage::set_cy(double value) {
  _set_bit(1);
  cy_ = value;
}

// required double radius = 3;
inline bool CircleMessage::has_radius() const {
  return _has_bit(2);
}
inline void CircleMessage::clear_radius() {
  radius_ = 0;
  _clear_bit(2);
}
inline double CircleMessage::radius() const {
  return radius_;
}
inline void CircleMessage::set_radius(double value) {
  _set_bit(2);
  radius_ = value;
}

// -------------------------------------------------------------------

// PointMessage

// required double x = 1;
inline bool PointMessage::has_x() const {
  return _has_bit(0);
}
inline void PointMessage::clear_x() {
  x_ = 0;
  _clear_bit(0);
}
inline double PointMessage::x() const {
  return x_;
}
inline void PointMessage::set_x(double value) {
  _set_bit(0);
  x_ = value;
}

// required double y = 2;
inline bool PointMessage::has_y() const {
  return _has_bit(1);
}
inline void PointMessage::clear_y() {
  y_ = 0;
  _clear_bit(1);
}
inline double PointMessage::y() const {
  return y_;
}
inline void PointMessage::set_y(double value) {
  _set_bit(1);
  y_ = value;
}

// -------------------------------------------------------------------

// LineMessage

// required double x0 = 1;
inline bool LineMessage::has_x0() const {
  return _has_bit(0);
}
inline void LineMessage::clear_x0() {
  x0_ = 0;
  _clear_bit(0);
}
inline double LineMessage::x0() const {
  return x0_;
}
inline void LineMessage::set_x0(double value) {
  _set_bit(0);
  x0_ = value;
}

// required double y0 = 2;
inline bool LineMessage::has_y0() const {
  return _has_bit(1);
}
inline void LineMessage::clear_y0() {
  y0_ = 0;
  _clear_bit(1);
}
inline double LineMessage::y0() const {
  return y0_;
}
inline void LineMessage::set_y0(double value) {
  _set_bit(1);
  y0_ = value;
}

// required double x1 = 3;
inline bool LineMessage::has_x1() const {
  return _has_bit(2);
}
inline void LineMessage::clear_x1() {
  x1_ = 0;
  _clear_bit(2);
}
inline double LineMessage::x1() const {
  return x1_;
}
inline void LineMessage::set_x1(double value) {
  _set_bit(2);
  x1_ = value;
}

// required double y1 = 4;
inline bool LineMessage::has_y1() const {
  return _has_bit(3);
}
inline void LineMessage::clear_y1() {
  y1_ = 0;
  _clear_bit(3);
}
inline double LineMessage::y1() const {
  return y1_;
}
inline void LineMessage::set_y1(double value) {
  _set_bit(3);
  y1_ = value;
}

// -------------------------------------------------------------------

// MapMessage

// required double xcenter = 1;
inline bool MapMessage::has_xcenter() const {
  return _has_bit(0);
}
inline void MapMessage::clear_xcenter() {
  xcenter_ = 0;
  _clear_bit(0);
}
inline double MapMessage::xcenter() const {
  return xcenter_;
}
inline void MapMessage::set_xcenter(double value) {
  _set_bit(0);
  xcenter_ = value;
}

// required double ycenter = 2;
inline bool MapMessage::has_ycenter() const {
  return _has_bit(1);
}
inline void MapMessage::clear_ycenter() {
  ycenter_ = 0;
  _clear_bit(1);
}
inline double MapMessage::ycenter() const {
  return ycenter_;
}
inline void MapMessage::set_ycenter(double value) {
  _set_bit(1);
  ycenter_ = value;
}

// required double scale = 3;
inline bool MapMessage::has_scale() const {
  return _has_bit(2);
}
inline void MapMessage::clear_scale() {
  scale_ = 0;
  _clear_bit(2);
}
inline double MapMessage::scale() const {
  return scale_;
}
inline void MapMessage::set_scale(double value) {
  _set_bit(2);
  scale_ = value;
}

// required int32 xres = 4;
inline bool MapMessage::has_xres() const {
  return _has_bit(3);
}
inline void MapMessage::clear_xres() {
  xres_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 MapMessage::xres() const {
  return xres_;
}
inline void MapMessage::set_xres(::google::protobuf::int32 value) {
  _set_bit(3);
  xres_ = value;
}

// required int32 yres = 5;
inline bool MapMessage::has_yres() const {
  return _has_bit(4);
}
inline void MapMessage::clear_yres() {
  yres_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 MapMessage::yres() const {
  return yres_;
}
inline void MapMessage::set_yres(::google::protobuf::int32 value) {
  _set_bit(4);
  yres_ = value;
}

// optional bytes data = 6;
inline bool MapMessage::has_data() const {
  return _has_bit(5);
}
inline void MapMessage::clear_data() {
  if (data_ != &_default_data_) {
    data_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& MapMessage::data() const {
  return *data_;
}
inline void MapMessage::set_data(const ::std::string& value) {
  _set_bit(5);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void MapMessage::set_data(const char* value) {
  _set_bit(5);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void MapMessage::set_data(const void* value, size_t size) {
  _set_bit(5);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MapMessage::mutable_data() {
  _set_bit(5);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  return data_;
}

// -------------------------------------------------------------------

// ScaleMessage

// required double scale = 1;
inline bool ScaleMessage::has_scale() const {
  return _has_bit(0);
}
inline void ScaleMessage::clear_scale() {
  scale_ = 0;
  _clear_bit(0);
}
inline double ScaleMessage::scale() const {
  return scale_;
}
inline void ScaleMessage::set_scale(double value) {
  _set_bit(0);
  scale_ = value;
}

// -------------------------------------------------------------------

// MouseEvent

// required .MouseEvent.MouseButton button = 1;
inline bool MouseEvent::has_button() const {
  return _has_bit(0);
}
inline void MouseEvent::clear_button() {
  button_ = 0;
  _clear_bit(0);
}
inline ::MouseEvent_MouseButton MouseEvent::button() const {
  return static_cast< ::MouseEvent_MouseButton >(button_);
}
inline void MouseEvent::set_button(::MouseEvent_MouseButton value) {
  GOOGLE_DCHECK(::MouseEvent_MouseButton_IsValid(value));
  _set_bit(0);
  button_ = value;
}

// required .MouseEvent.MouseState state = 2;
inline bool MouseEvent::has_state() const {
  return _has_bit(1);
}
inline void MouseEvent::clear_state() {
  state_ = 0;
  _clear_bit(1);
}
inline ::MouseEvent_MouseState MouseEvent::state() const {
  return static_cast< ::MouseEvent_MouseState >(state_);
}
inline void MouseEvent::set_state(::MouseEvent_MouseState value) {
  GOOGLE_DCHECK(::MouseEvent_MouseState_IsValid(value));
  _set_bit(1);
  state_ = value;
}

// required double x = 3;
inline bool MouseEvent::has_x() const {
  return _has_bit(2);
}
inline void MouseEvent::clear_x() {
  x_ = 0;
  _clear_bit(2);
}
inline double MouseEvent::x() const {
  return x_;
}
inline void MouseEvent::set_x(double value) {
  _set_bit(2);
  x_ = value;
}

// required double y = 4;
inline bool MouseEvent::has_y() const {
  return _has_bit(3);
}
inline void MouseEvent::clear_y() {
  y_ = 0;
  _clear_bit(3);
}
inline double MouseEvent::y() const {
  return y_;
}
inline void MouseEvent::set_y(double value) {
  _set_bit(3);
  y_ = value;
}

// optional bool shift_down = 5;
inline bool MouseEvent::has_shift_down() const {
  return _has_bit(4);
}
inline void MouseEvent::clear_shift_down() {
  shift_down_ = false;
  _clear_bit(4);
}
inline bool MouseEvent::shift_down() const {
  return shift_down_;
}
inline void MouseEvent::set_shift_down(bool value) {
  _set_bit(4);
  shift_down_ = value;
}

// optional bool ctrl_down = 6;
inline bool MouseEvent::has_ctrl_down() const {
  return _has_bit(5);
}
inline void MouseEvent::clear_ctrl_down() {
  ctrl_down_ = false;
  _clear_bit(5);
}
inline bool MouseEvent::ctrl_down() const {
  return ctrl_down_;
}
inline void MouseEvent::set_ctrl_down(bool value) {
  _set_bit(5);
  ctrl_down_ = value;
}

// optional bool alt_down = 7;
inline bool MouseEvent::has_alt_down() const {
  return _has_bit(6);
}
inline void MouseEvent::clear_alt_down() {
  alt_down_ = false;
  _clear_bit(6);
}
inline bool MouseEvent::alt_down() const {
  return alt_down_;
}
inline void MouseEvent::set_alt_down(bool value) {
  _set_bit(6);
  alt_down_ = value;
}

#endif  // PROTOBUF_graphics_2eproto__INCLUDED
